package com.module.alarm;

import junit.framework.Assert;

import com.android.uiautomator.core.UiObject;
import com.android.uiautomator.core.UiObjectNotFoundException;
import com.android.uiautomator.core.UiSelector;
import com.module.common.CommonModule;
import com.sonyericsson.test.acceptancetest.AcceptanceTestCase;

import android.hardware.Camera.CameraInfo;
import android.hardware.Camera;
import android.util.Log;
import android.view.KeyEvent;

public class AlarmModule implements IAlarm{
    AcceptanceTestCase testCase;

    CommonModule commonModule;

    String TAG = "Reliability";
    CameraInfo info = new Camera.CameraInfo();

    public AlarmModule(AcceptanceTestCase testCase){
        this.testCase = testCase;
        this.commonModule = new CommonModule(testCase);
    }
    public void startAlarmFromMenu() {
    	commonModule.backOutToHomeScreen();
    	testCase.launchApp("com.sonyericsson.organizer", "com.sonyericsson.organizer.Organizer");
    	commonModule.wait(2);
    }

    public void setNewAlarmOneMinuteFromNow() throws UiObjectNotFoundException{
    	startAlarmFromMenu();
    	switchAlarmTabByDescription("Alarm");
    	testCase.clickItemWithId("menu_launcher_addalarm");
    	commonModule.wait(2);
    	testCase.clickId("alarm_set_alarm_time_layout");// Set alarm time.
    	commonModule.wait(2);

		// get current hour and min

		int hour = Integer.valueOf(testCase
				.getTextFromViewWithId("numberpicker_input"));
		Log.i("Current hour", "-----> " + hour);
		int minute = Integer.valueOf(testCase.getTextFromViewWithId(
				"numberpicker_input", 1));
		Log.i("Current minute", "-----> " + minute);

		// Set alarm time : Hour and minute
		if (minute==59){
			testCase.clickItemWithId("numberpicker_input");
			if (hour==23){
				Log.i("ALARM HOUR", "----------> " + 00);
				testCase.enterText("00");
			}
			else{
				Log.i("ALARM HOUR", "----------> " + hour);;
			}
			Log.i("ALARM MINUTE", "----------> " + 02);
			testCase.clickItemWithId("numberpicker_input",1);
			testCase.enterText("02");
		}
		else{
			Log.i("ALARM HOUR", "----------> " + hour);
			Log.i("ALARM MINUTE", "----------> " + (minute+1));
			testCase.clickItemWithId("numberpicker_input",1);
			testCase.enterText(String.valueOf(minute+3));
		}

		testCase.pressKey(KeyEvent.KEYCODE_BACK);
		commonModule.wait(1);
		if (testCase.isViewWithTextPresent("Done")) {
			Log.e(TAG, "Set Alarm Time");
			testCase.click("Done");
		} else {
			testCase.click("Set");
		}

		testCase.click("Done");

		commonModule.wait(2);

    }

    public void deleteAllAlarms() {
    	startAlarmFromMenu();
    	commonModule.wait(2);
    	testCase.pressKey(KeyEvent.KEYCODE_MENU);
    	commonModule.wait(1);
        if (testCase.isViewWithTextPresent("Delete alarms")) {
        	testCase.clickItemWithText("Delete alarms");
        	commonModule.wait(1);
        	testCase.setTimeout(1000);
            String deleteBoxId = null;
            boolean alarmExist = false;
            if (testCase.isViewWithIdPresent("indicator_delete")) {
                deleteBoxId = "indicator_delete";
                alarmExist = true;
            } else if (testCase.isViewWithIdPresent("clock_onoff")) {
                deleteBoxId = "clock_onoff";
                alarmExist = true;
            } else {
                alarmExist = false;
            }
            if (alarmExist) {
                for (int i = 0; i < 5; i++) {
                    if (testCase.isViewWithIdPresent(deleteBoxId, i)) {
                    	testCase.clickItemWithId(deleteBoxId, i);
                    	commonModule.wait(1);
                    }
                }
                commonModule.wait(1);
                testCase.clickItemWithId("delete_button");
                commonModule.wait(1);
                testCase.clickItemWithText("Yes");
                commonModule.wait(1);
            } else {
            	testCase.resetTimeout();
                Log.v(TAG, "There is no alarm to delete");
            }
            testCase.resetTimeout();
        } else {
            Log.v(TAG, "Could not find delete button");
            Assert.fail("Could not find delete button");
        }
    }
	@Override
	public boolean snoozeAlarm(int timeout) {
        long startTime = System.currentTimeMillis();

        while(System.currentTimeMillis() - startTime < timeout){
            if(testCase.isViewWithIdPresent("dismissSlider")){
            	testCase.clickId("snooze");
                return true;
            }else

                testCase.sleep(1000);
        }

        return false;

	}

	public void switchAlarmTabs() throws UiObjectNotFoundException{
		commonModule.clickDescription("Alarm");
		commonModule.waitForId("com.sonyericsson.organizer:id/alarms_list", 2000);

		commonModule.clickDescription("World clock");
		commonModule.waitForResourceId("com.sonyericsson.organizer:id/worldclock_list", 2000);

		commonModule.clickDescription("Stopwatch");
		commonModule.waitForResourceId("com.sonyericsson.organizer:id/stopwatch_header", 2000);

		commonModule.clickDescription("Timer");
		commonModule.waitForResourceId("com.sonyericsson.organizer:id/timer_countdown", 2000);
	}

	public void switchAlarmTabByDescription(String desc) throws UiObjectNotFoundException{
		commonModule.clickDescription(desc);
		commonModule.wait(2);
	}

	public void setHomeTown(String homeCity) throws UiObjectNotFoundException{
		if(!commonModule.isResourceId("com.sonyericsson.organizer:id/worldclock_list")){
			switchAlarmTabByDescription("World clock");
		}
		commonModule.clickDescription("More options");
		commonModule.waitForText("Set home city", 2000);

		commonModule.clickText("Set home city");
		commonModule.waitForResourceId("com.sonyericsson.organizer:id/city_search", 3000);

		commonModule.clickResourceId("com.sonyericsson.organizer:id/city_search");
		testCase.enterText(homeCity);
		commonModule.clickResourceId("com.sonyericsson.organizer:id/search_city_name");
		Assert.assertTrue("Set home town failed.",
				commonModule.waitForResourceId("com.sonyericsson.organizer:id/clock_home", 3000));
	}

	public void changeTemperatureUnits() throws UiObjectNotFoundException{
		if(!commonModule.isResourceId("com.sonyericsson.organizer:id/worldclock_list")){
			switchAlarmTabByDescription("World clock");
		}
		commonModule.clickDescription("More options");
		if (commonModule.waitForText("Fahrenheit", 2000)) {
			commonModule.clickText("Fahrenheit");
			commonModule.waitForTextGone("Fahrenheit", 2000);
		} else if (commonModule.waitForText("Celsius", 2000)) {
			commonModule.clickText("Celsius");
			commonModule.waitForTextGone("Celsius", 2000);
		}
	}

	public void rearrangeWithWordClock() throws UiObjectNotFoundException{
		if(!commonModule.isResourceId("com.sonyericsson.organizer:id/worldclock_list")){
			switchAlarmTabByDescription("World clock");
		}
		commonModule.clickDescription("More options");
		commonModule.waitForText("Rearrange", 2000);

		commonModule.clickText("Rearrange");
		commonModule.waitForResourceId(
				"com.sonyericsson.organizer:id/rearrange_handle", 2000);

		testCase.dragViewBetweenTwoPosition(commonModule.getX(670, 720),
				commonModule.getY(210, 1280), commonModule.getX(670, 720),
				commonModule.getY(350, 1280));

		commonModule.clickText("Done");
	}

	public void deleteCity(String city) throws UiObjectNotFoundException{
		if(!commonModule.isResourceId("com.sonyericsson.organizer:id/worldclock_list")){
			switchAlarmTabByDescription("World clock");
		}
		commonModule.clickDescription("More options");
		commonModule.waitForText("Delete", 2000);

		commonModule.clickText("Delete");
		commonModule.waitForText(city, 3000);

		commonModule.clickText(city);
		commonModule.wait(1);

		commonModule.clickResourceId("com.sonyericsson.organizer:id/delete_button");
		commonModule.waitForText("Delete cities?", 3000);

		commonModule.clickText("Yes");
		Assert.assertTrue("Delete city failed.",
				commonModule.waitForTextGone(city, 3000));
	}

	public void stopwatchOperation() throws UiObjectNotFoundException{
		if(!commonModule.isResourceId("com.sonyericsson.organizer:id/stopwatch_header")){
			switchAlarmTabByDescription("Stopwatch");
		}
		commonModule.waitForText("Start", 2000);

		// Start stopwatch.
		commonModule.clickText("Start");
		Assert.assertTrue("Start stopwatch failed.",
				commonModule.waitForText("Stop", 2000));

		// Stop stopwatch.
		commonModule.clickText("Stop");
		Assert.assertTrue("Stop stopwatch failed.",
				commonModule.waitForText("Start", 2000));

		// Resume stopwatch.
		commonModule.clickText("Start");
		Assert.assertTrue("Resume stopwatch failed.",
				commonModule.waitForText("Stop", 2000));

		commonModule.clickText("Stop");
		commonModule.waitForText("Start", 2000);

		// Reset stopwatch.
		commonModule.clickText("Reset");
		UiObject reset = new UiObject(new UiSelector().text("Reset"));
		Assert.assertTrue("Reset stopwatch failed.", !reset.isCheckable());
	}

	public void TimerOperation() throws UiObjectNotFoundException{
		if(!commonModule.isResourceId("com.sonyericsson.organizer:id/timer_countdown")){
			switchAlarmTabByDescription("Timer");
		}
		commonModule.waitForText("Set time", 2000);

		commonModule.clickText("Set time");
		commonModule.wait(2);

		testCase.clickItemWithText("00", 2);
		testCase.enterText("10");
		testCase.enterText("\n");
		commonModule.clickText("OK");
		commonModule.waitForText("Start", 2000);

		commonModule.clickText("Start");
		commonModule.waitForResourceId("com.sonyericsson.organizer:id/timer_history_text", 3000);

		commonModule.clickText("Stop");
		commonModule.waitForText("Reset", 5000);

		commonModule.clickText("Reset");
		commonModule.clickText("Clear");
	}

	public void compareWorldClock() throws UiObjectNotFoundException{
		if(!commonModule.isResourceId("com.sonyericsson.organizer:id/worldclock_list")){
			switchAlarmTabByDescription("World clock");
		}
		Assert.assertTrue(
				"World clock Time UI display with weather.",
				commonModule.waitForResourceId("com.sonyericsson.organizer:id/clock_time", 3000)
						&& commonModule.waitForResourceId(
								"com.sonyericsson.organizer:id/weather_icon", 10 * 1000));
	}
}

