
package com.test.reliability.concurrentTestCase;

import com.android.uiautomator.core.UiObjectNotFoundException;
import com.concurrent.PostInvocationHandler;
import com.concurrent.PrePostInvocationHandler;
import com.concurrent.events.ConcurrentEvents;
import com.concurrent.events.IConcurrentEvents;
import com.concurrent.scenario.ScenarioAddClock;
import com.concurrent.scenario.ScenarioCalculator;
import com.concurrent.scenario.ScenarioCameraRecordingVideo;
import com.concurrent.scenario.ScenarioEditReadMMS;
import com.concurrent.scenario.ScenarioEditReadSMS;
import com.concurrent.scenario.ScenarioExportContacts;
import com.concurrent.scenario.ScenarioImportContacts;
import com.concurrent.scenario.ScenarioOngingCall;
import com.concurrent.scenario.ScenarioPhoneRinging;
import com.concurrent.scenario.ScenarioPlayMusicAndVerifyBasicFunction;
import com.concurrent.scenario.ScenarioPlayingFMRadio;
import com.concurrent.scenario.ScenarioRecordingVideo4KVideo;
import com.concurrent.scenario.ScenarioRecordingVideo4KVideoSuperipr;
import com.concurrent.scenario.ScenarioRecordingVideoAREffect;
import com.concurrent.scenario.ScenarioRecordingVideoARFun;
import com.concurrent.scenario.ScenarioRecordingVideoCreativeEffect;
import com.concurrent.scenario.ScenarioRecordingVideoTimeshiftVideo;
import com.concurrent.scenario.ScenarioSetStopwatch;
import com.concurrent.scenario.ScenarioTakePictureBackgroundDefocus;
import com.concurrent.scenario.ScenarioVideoPlaying;
import com.concurrent.scenario.ScenarioViewPictureFromAlbum;
import com.module.alarm.*;
import com.module.calculator.AbstractCalculatorFactory;
import com.module.calculator.ICalculator;
import com.module.calendar.*;
import com.module.camera.AbstractCameraFactory;
import com.module.camera.CameraFactory;
import com.module.camera.ICamera;
import com.module.album.AlbumFactory;
import com.module.album.IAlbum;
import com.module.common.CommonModule;
import com.module.email.AbstractEmailFactory;
import com.module.email.IEmail;
import com.module.email.EmailFactory;
import com.module.email.IEmail;
import com.module.facebook.AbstractFacebookFactory;
import com.module.facebook.IFacebook;
import com.module.media.IMedia;
import com.module.media.MediaFactory;
import com.module.messaging.*;
import com.module.movies.*;
import com.module.officesuite.IOfficeSuite;
import com.module.officesuite.OfficeSuiteFactory;
import com.module.settings.AbstractSettingsFactory;
import com.module.settings.ISetting;
import com.module.telephony.AbstractTelephonyFactory;
import com.module.telephony.ITelephony;
import com.module.telephony.TelephonyFactory;
import com.module.contacts.IContacts;
import com.module.contacts.ContactsFactory;
import com.module.walkman.*;
import com.parents.GroupFactories;
import com.parser.cases.TestDataExtract;
import com.parser.data.ModuleData;
import com.parser.data.ModuleDataParser;
import com.parser.module.PropertyNotFoundException;
import com.sonyericsson.test.acceptancetest.AcceptanceTestCase;
import com.test.reliability.BasicUtils;
import com.utils.CommandConstantsUtils;
import com.utils.ErrorInfoUtils;
import com.utils.TestUIWatcher;

import org.xmlpull.v1.XmlPullParserException;

import android.content.ComponentName;
import android.content.Intent;
import android.hardware.Camera;
import android.util.Log;
import android.view.KeyEvent;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Environment;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.lang.reflect.Proxy;

import junit.framework.Assert;
import junit.framework.AssertionFailedError;

public class ReliabilityAutomaticModulesII {

    private AcceptanceTestCase testCase;

    private CommonModule commonModule;

    private BasicUtils basicUtils;

    ITelephony telephonyModule;

    ICamera camera;

    IMessaging IMessaging;

    IMedia IMedia;

    IAlarm IAlarm;

    ICalendar ICalendar;

    IWalkman IWalkman;

    IAlbum IAlbum;

    IContacts IContacts;

    IEmail IEmail;
    
	private IFacebook facebook;
		 
    private IAlbum albumModule;
    
    private IMovies movieModule;
    
    private ICalculator calculator;
    
    private ISetting settingsModule;

    private IOfficeSuite officeSuite;
    
    ConcurrentEvents concurrentevets;
    public String cameraFilePath = Environment.getExternalStorageDirectory().getPath()
            + "/DCIM/100ANDRO/";

    public String xperiaFilePath = Environment.getExternalStorageDirectory().getPath()
            + "/DCIM/XPERIA/";

    public static String TAG = "Reliability";

    public String testloops;

    public int runFlag;

    public boolean isCatch;

    private long time1;

    private long time2;

    private long time4;

    private int realTimes = 0;

    private String callNumber;

    private static String callNumber2;

    private static String callNumber3;

    private static String selNumber;

    private static String test_emailaccount;

    private static String test_emailpassword;

    private static String test_email2account;

    private static String test_email2password;

    private static String test_facebookaccount;

    private static String test_facebookpassword;

    private static String test_facebookname;

    private static String test_wifi;

    private static String test_wifipassword;

    private static String test_partnerskypeaccount;

    private static String test_skypeaccount;

    private static String test_skypepassword;

    private static String test_sipaccount;

    private static String test_sippassword;

    private static String partner_sipaccount;

    private static String test_EASaccount;

    private static String test_EASpassword;

    private static String test_serveremail;

    private static String test_gmailaccount;

    private static String test_gmailpassword;

    public ReliabilityAutomaticModulesII(AcceptanceTestCase testCase)
            throws PropertyNotFoundException, UiObjectNotFoundException, IOException, XmlPullParserException {
        ModuleDataParser dataParser = new ModuleDataParser();
        dataParser.parse();

        this.testCase = testCase;
        this.commonModule = new CommonModule(testCase);
        officeSuite = OfficeSuiteFactory.getOfficeSuiteModule(testCase);
        camera = ((AbstractCameraFactory)GroupFactories.createFactory(testCase, "camera")).create();
        this.IMessaging = MessagingFactory.getMessagingModule(testCase);
        telephonyModule = ((AbstractTelephonyFactory)GroupFactories.createFactory(testCase, "telephony")).create();
        this.IMedia = MediaFactory.create(testCase);
        this.IAlarm = AlarmFactory.getCameraModule(testCase);
        this.ICalendar = CalendarFactory.getCalendarModule(testCase);
        this.IWalkman = ((AbstractWalkmanFactory)GroupFactories.createFactory(testCase, "walkman")).create();
        this.IAlbum = AlbumFactory.getAlbumModule(testCase);
        this.IContacts = ContactsFactory.getContactsModule(testCase);
        this.IEmail = ((AbstractEmailFactory)GroupFactories.createFactory(testCase, "email")).create();
        albumModule = AlbumFactory.getAlbumModule(testCase);
        facebook = ((AbstractFacebookFactory)GroupFactories.createFactory(testCase, "facebook"))
                .create();
        calculator = ((AbstractCalculatorFactory)GroupFactories.createFactory(testCase,
                "calculator")).create();
        settingsModule = ((AbstractSettingsFactory)(GroupFactories.createFactory(testCase,
                "settings"))).getSettingsModule();


		this.concurrentevets = new ConcurrentEvents(testCase);
        getAccounts();
        TestUIWatcher UIWatcher = new TestUIWatcher();
        UIWatcher.watch();

        Log.d(TAG, "Send email account to server");
        IMessaging.remoteSendMessageToDUT("MUT_Email_Account:" + test_emailaccount, callNumber);
        IMessaging.remoteSendMessageToDUT("MUT_Facebook_Name:" + test_facebookname, callNumber);
    }

    public void getAccounts() {
        callNumber = TestDataExtract.callNumber;
        callNumber2 = TestDataExtract.callNumber2;
        callNumber3 = TestDataExtract.callNumber3;

        test_emailaccount = TestDataExtract.test_emailaccount;
        test_emailpassword = TestDataExtract.test_emailpassword;
        // test_googleaccount = TestDataExtract.test_googleaccount;
        // test_googlepassword = TestDataExtract.test_googlepassword;
        test_facebookaccount = TestDataExtract.test_facebookaccount;
        test_facebookpassword = TestDataExtract.test_facebookpassword;
        test_facebookname = TestDataExtract.test_facebookname;
        // test_serveremail = TestDataExtract.test_serveremail;
        test_partnerskypeaccount = TestDataExtract.test_partnerskypeaccount;
        test_skypeaccount = TestDataExtract.test_skypeaccount;
        test_skypepassword = TestDataExtract.test_skypepassword;
        test_sipaccount = TestDataExtract.test_sipaccount;
        test_sippassword = TestDataExtract.test_sippassword;
        partner_sipaccount = TestDataExtract.partner_sipaccount;
        test_email2account = TestDataExtract.test_email2account;
        test_email2password = TestDataExtract.test_email2password;
        test_EASaccount = TestDataExtract.test_EASaccount;
        test_EASpassword = TestDataExtract.test_EASpassword;
        test_serveremail = TestDataExtract.test_serveremail;
        test_gmailaccount = TestDataExtract.test_gmailaccount;
        test_gmailpassword = TestDataExtract.test_gmailpassword;

        test_wifi = TestDataExtract.test_wifi;
        test_wifipassword = TestDataExtract.test_wifipassword;
    }

    /**
     * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-1
     * RELIA_Messaging_Interaction events when sending message-Parameter__incoming_call
     */

	public void RELIA_Messaging_Interaction_Events_When_Sending_SMS__incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadSMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		try {

			editReadMessagaConcurrent.answerIncomingCall();

			editReadMessagaConcurrent.ignoreIncomingCall();

			editReadMessagaConcurrent.hangUpIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSAntherCallIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSBusyIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSDrivingIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSEatingIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSMeetingIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			telephonyModule.endCall();
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-2
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__incoming_messgae
	 */

	@SuppressWarnings("static-access")
	public void RELIA_Messaging_Interaction_Events_When_Sending_SMS__incoming_messgae(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadSMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		try {

			editReadMessagaConcurrent.receiveSMS();

			editReadMessagaConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-3
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__incoming_email
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_SMS__incoming_email(
			String casename, HashMap<String, String> paras) throws Exception {
		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadSMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		try {
			editReadMessagaConcurrent.receiveEmail();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-4
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__background_media
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_SMS__background_media(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler editReadMessaga = new PostInvocationHandler(concurrentevets,
				new ScenarioEditReadSMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(), editReadMessaga);

		try {
			editReadMessagaConcurrent.musicPlayInBackground();

			editReadMessagaConcurrent.FMRadioPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
			IMedia.stopRadio();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-4
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__background_media
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_SMS__background_video(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler editReadMessaga = new PostInvocationHandler(concurrentevets,
				new ScenarioEditReadSMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(), editReadMessaga);

		try {
			IMedia.setVideoPlayBackgroundSetting("on");

			editReadMessagaConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			commonModule.unLockScreen();
			IMedia.setVideoPlayBackgroundSetting("off");

		}
	}
	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-5
	 * RELIA_Messaging_Interaction events when sending message-Parameter__alarm
	 */

	@SuppressWarnings({ "static-access", "deprecation" })
	public void RELIA_Messaging_Interaction_Events_When_Sending_SMS__alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadSMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();
			
			editReadMessagaConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			editReadMessagaConcurrent.calendarExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.deleteAllAlarms();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-6
	 * RELIA_Messaging_Interaction events when sending message-Parameter__chat
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_SMS__chat(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadSMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		try {
			
			editReadMessagaConcurrent.SNSStatusUpdateFacebook();
			
			editReadMessagaConcurrent.SNSStatusUpdateWeibo();
			
		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-1
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__incoming_call
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_MMS__incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadMMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		try {

			editReadMessagaConcurrent.answerIncomingCall();

			editReadMessagaConcurrent.ignoreIncomingCall();

			editReadMessagaConcurrent.hangUpIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSAntherCallIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSBusyIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSDrivingIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSEatingIncomingCall();

			editReadMessagaConcurrent.rejectWithSMSMeetingIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			telephonyModule.endCall();
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-2
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__incoming_messgae
	 */

	@SuppressWarnings("static-access")
	public void RELIA_Messaging_Interaction_Events_When_Sending_MMS__incoming_messgae(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadMMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		try {

			editReadMessagaConcurrent.receiveSMS();

			editReadMessagaConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {

			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-3
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__incoming_email
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_MMS__incoming_email(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadMMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		try {
			editReadMessagaConcurrent.receiveEmail();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-4
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__background_media
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_MMS__background_media(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler editReadMessaga = new PostInvocationHandler(concurrentevets,
				new ScenarioEditReadMMS(testCase));
		
		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(), editReadMessaga);

		try {
			editReadMessagaConcurrent.musicPlayInBackground();

			editReadMessagaConcurrent.FMRadioPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
			IMedia.stopRadio();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-4
	 * RELIA_Messaging_Interaction events when sending
	 * message-Parameter__background_media
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_MMS__background_video(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler editReadMessaga = new PostInvocationHandler(concurrentevets,
				new ScenarioEditReadMMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(), editReadMessaga);

		try {
			IMedia.setVideoPlayBackgroundSetting("on");

			editReadMessagaConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			IMedia.setVideoPlayBackgroundSetting("off");

		}
	}
	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-5
	 * RELIA_Messaging_Interaction events when sending message-Parameter__alarm
	 */

	@SuppressWarnings({ "static-access", "deprecation" })
	public void RELIA_Messaging_Interaction_Events_When_Sending_MMS__alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadMMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();
			
			editReadMessagaConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			editReadMessagaConcurrent.calendarExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.deleteAllAlarms();

		}
	}

	/**
	 * Case in Sony ALM: Domain: PSV Project: PSV ID: 1344171-6
	 * RELIA_Messaging_Interaction events when sending message-Parameter__chat
	 */

	public void RELIA_Messaging_Interaction_Events_When_Sending_MMS__chat(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler editReadMessaga = new PrePostInvocationHandler(concurrentevets,
				new ScenarioEditReadMMS(testCase));

		IConcurrentEvents editReadMessagaConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						editReadMessaga);

		try {
			
			editReadMessagaConcurrent.SNSStatusUpdateFacebook();
			
			editReadMessagaConcurrent.SNSStatusUpdateWeibo();
			
		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();

		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_take_picture_when_calling(String casename, HashMap<String, String> paras) throws Exception {

		try {
					telephonyModule.makeMOCallAndAnswered(callNumber);
					commonModule.backOutToHomeScreen();
					
					camera.openCameraAndTakePicture("Superior auto");
					
					camera.openCameraAndTakePicture("AR fun");
					
					camera.openCameraAndTakePicture("Timeshift video");
					
					camera.openCameraAndTakePicture("AR effect");
					
					camera.openCameraAndTakePicture("Creative effect");
					
					camera.openCameraAndTakePicture("Background defocus");
					
					camera.openCameraAndTakePicture("Face in");
					
					camera.openCameraAndTakePicture("Multi camera");
					
					camera.openCameraAndTakePicture("Sweep Panorama");
					
					camera.openCameraAndTakePicture("Sound Photo");
					
					//camera.openCameraAndTakePicture("Portrait Retouch");
					
					camera.openCameraAndTakePicture("4K video");
					
					telephonyModule.endCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
			commonModule.delete(cameraFilePath);
		}
}
	
	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_superiorAuto_incoming_calling(String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideo4KVideoSuperipr(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.answerIncomingCall();

			recordingVideoConcurrent.ignoreIncomingCall();

			recordingVideoConcurrent.hangUpIncomingCall();

			recordingVideoConcurrent.rejectWithSMSBusyIncomingCall();

			recordingVideoConcurrent.rejectWithSMSDrivingIncomingCall();

			recordingVideoConcurrent.rejectWithSMSMeetingIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
			commonModule.delete(cameraFilePath);
		}
}
	
	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_superiorAuto_incoming_sms(String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideo4KVideoSuperipr(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.receiveSMSInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_superiorAuto_alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideo4KVideoSuperipr(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();

			recordingVideoConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			recordingVideoConcurrent.calendarExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
}
	
	public void RELIA_Music_Player_Concurrent_events_while_playing_music__Incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler playingMusic = new PrePostInvocationHandler(
				concurrentevets, new ScenarioPlayMusicAndVerifyBasicFunction(
						testCase));

		IConcurrentEvents playingMusicConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingMusic);

		try {

			IWalkman.setPlayMode("repeat all");

			playingMusicConcurrent.answerIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_Music_Player_Concurrent_events_while_playing_music__Incoming_MMS(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler playingMusic = new PrePostInvocationHandler(
				concurrentevets, new ScenarioPlayMusicAndVerifyBasicFunction(
						testCase));

		IConcurrentEvents playingMusicConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingMusic);

		try {

			IWalkman.setPlayMode("repeat all");

			playingMusicConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_Music_Player_Concurrent_events_while_playing_music__Incoming_email(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler playingMusic = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayMusicAndVerifyBasicFunction(testCase));

		IConcurrentEvents playingMusicConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingMusic);

		try {

			IWalkman.setPlayMode("repeat all");
			
			playingMusicConcurrent.receiveEmail();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_Music_Player_Concurrent_events_while_playing_music__FM_background(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler playingMusic = new PostInvocationHandler(concurrentevets,
				new ScenarioPlayMusicAndVerifyBasicFunction(testCase));

		IConcurrentEvents playingMusicConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingMusic);

		try {

			IWalkman.setPlayMode("repeat all");
			
			playingMusicConcurrent.FMRadioPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_Music_Player_Concurrent_events_while_playing_music__Video_background(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler playingMusic = new PostInvocationHandler(concurrentevets,
				new ScenarioPlayMusicAndVerifyBasicFunction(testCase));

		IConcurrentEvents playingMusicConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingMusic);

		try {

			IWalkman.setPlayMode("repeat all");
			
			playingMusicConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_Music_Player_Concurrent_events_while_playing_music__alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler playingMusic = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayMusicAndVerifyBasicFunction(testCase));

		IConcurrentEvents playingMusicConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingMusic);

		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			IWalkman.setPlayMode("repeat all");
			
			playingMusicConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}


	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_superiorAuto_video_playing(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler cameraRecordingVideo = new PostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideo4KVideoSuperipr(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			IMedia.setVideoPlayBackgroundSetting("on");

			recordingVideoConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.setVideoPlayBackgroundSetting("off");
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_ARfun_incoming_calling(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoARFun(
						testCase));
		
		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.answerIncomingCall();

			recordingVideoConcurrent.ignoreIncomingCall();

			recordingVideoConcurrent.hangUpIncomingCall();

			recordingVideoConcurrent.rejectWithSMSBusyIncomingCall();

			recordingVideoConcurrent.rejectWithSMSDrivingIncomingCall();

			recordingVideoConcurrent.rejectWithSMSMeetingIncomingCall();

	} catch (Exception ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} catch (AssertionFailedError ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} catch (Error ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} finally {
		commonModule.unLockScreen();
		commonModule.backOutToHomeScreen();
		telephonyModule.endCall();
		commonModule.delete(cameraFilePath);
	}
}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_ARfun_incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoARFun(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.receiveSMSInBackground();

	} catch (Exception ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} catch (AssertionFailedError ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} catch (Error ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} finally {
		commonModule.unLockScreen();
		commonModule.backOutToHomeScreen();
		commonModule.delete(cameraFilePath);
	}
}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_ARfun_alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoARFun(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();

			recordingVideoConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			recordingVideoConcurrent.calendarExpiredInBackground();
		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_ARfun_video_playing(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler cameraRecordingVideo = new PostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoARFun(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			IMedia.setVideoPlayBackgroundSetting("on");
			recordingVideoConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.setVideoPlayBackgroundSetting("off");
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_AReffect_incoming_calling(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoAREffect(
						testCase));
		
		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.answerIncomingCall();

			recordingVideoConcurrent.ignoreIncomingCall();

			recordingVideoConcurrent.hangUpIncomingCall();

			recordingVideoConcurrent.rejectWithSMSBusyIncomingCall();

			recordingVideoConcurrent.rejectWithSMSDrivingIncomingCall();

			recordingVideoConcurrent.rejectWithSMSMeetingIncomingCall();

	} catch (Exception ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} catch (AssertionFailedError ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} catch (Error ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} finally {
		commonModule.unLockScreen();
		commonModule.backOutToHomeScreen();
		telephonyModule.endCall();
		commonModule.delete(cameraFilePath);
	}
}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_AReffect_incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoAREffect(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {
			
			recordingVideoConcurrent.receiveSMSInBackground();

	} catch (Exception ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} catch (AssertionFailedError ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} catch (Error ex) {
		commonModule.takeScreenShot(casename);
		throw ex;
	} finally {
		commonModule.unLockScreen();
		commonModule.backOutToHomeScreen();
		commonModule.delete(cameraFilePath);
	}
}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_AReffect_alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoAREffect(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();

			recordingVideoConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			recordingVideoConcurrent.calendarExpiredInBackground();
			
		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_AReffect_video_playing(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler cameraRecordingVideo = new PostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoAREffect(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			IMedia.setVideoPlayBackgroundSetting("on");
			recordingVideoConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.setVideoPlayBackgroundSetting("off");
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_creativeffect_incoming_calling(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoCreativeEffect(
						testCase));
		
		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.answerIncomingCall();

			recordingVideoConcurrent.ignoreIncomingCall();

			recordingVideoConcurrent.hangUpIncomingCall();

			recordingVideoConcurrent.rejectWithSMSBusyIncomingCall();

			recordingVideoConcurrent.rejectWithSMSDrivingIncomingCall();

			recordingVideoConcurrent.rejectWithSMSMeetingIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_creativeffect_incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoCreativeEffect(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.receiveSMSInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_creativeffect_alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoCreativeEffect(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();

			recordingVideoConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			recordingVideoConcurrent.calendarExpiredInBackground();
		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_creativeffect_video_playing(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler cameraRecordingVideo = new PostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoCreativeEffect(
						testCase));
		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			IMedia.setVideoPlayBackgroundSetting("on");
			recordingVideoConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.setVideoPlayBackgroundSetting("off");
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_4k2k_incoming_calling(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideo4KVideo(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.answerIncomingCall();

			recordingVideoConcurrent.ignoreIncomingCall();

			recordingVideoConcurrent.hangUpIncomingCall();

			recordingVideoConcurrent.rejectWithSMSBusyIncomingCall();

			recordingVideoConcurrent.rejectWithSMSDrivingIncomingCall();

			camera.launchCameraPhotoApplication();
			camera.selectOneEffectFromCameraSettings("4K video");
			recordingVideoConcurrent.rejectWithSMSMeetingIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_4k2k_incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideo4KVideo(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.receiveSMSInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_4k2k_alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideo4KVideo(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();

			recordingVideoConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			recordingVideoConcurrent.calendarExpiredInBackground();
		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_4k2k_video_playing(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler cameraRecordingVideo = new PostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideo4KVideo(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			IMedia.setVideoPlayBackgroundSetting("on");
			recordingVideoConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.setVideoPlayBackgroundSetting("off");
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_timeshift_incoming_calling(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoTimeshiftVideo(
						testCase));
		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {
			recordingVideoConcurrent.answerIncomingCall();

			recordingVideoConcurrent.ignoreIncomingCall();

			recordingVideoConcurrent.hangUpIncomingCall();

			recordingVideoConcurrent.rejectWithSMSBusyIncomingCall();

			recordingVideoConcurrent.rejectWithSMSDrivingIncomingCall();

			recordingVideoConcurrent.rejectWithSMSMeetingIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_timeshift_incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoTimeshiftVideo(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.receiveSMSInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_timeshift_alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoTimeshiftVideo(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();

			recordingVideoConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			recordingVideoConcurrent.calendarExpiredInBackground();
		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_timeshift_video_playing(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler cameraRecordingVideo = new PostInvocationHandler(
				concurrentevets, new ScenarioRecordingVideoTimeshiftVideo(
						testCase));
		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			IMedia.setVideoPlayBackgroundSetting("on");
			recordingVideoConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.setVideoPlayBackgroundSetting("off");
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_backgroundefocus_incoming_calling(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioTakePictureBackgroundDefocus(
						testCase));
		
		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.answerIncomingCall();

			recordingVideoConcurrent.ignoreIncomingCall();

			recordingVideoConcurrent.hangUpIncomingCall();

			recordingVideoConcurrent.rejectWithSMSBusyIncomingCall();

			recordingVideoConcurrent.rejectWithSMSDrivingIncomingCall();

			recordingVideoConcurrent.rejectWithSMSMeetingIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_backgroundefocus_incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioTakePictureBackgroundDefocus(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			recordingVideoConcurrent.receiveSMSInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_backgroundefocus_alarm(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler cameraRecordingVideo = new PrePostInvocationHandler(
				concurrentevets, new ScenarioTakePictureBackgroundDefocus(
						testCase));
		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";

		try {

			IAlarm.setNewAlarmOneMinuteFromNow();

			recordingVideoConcurrent.alarmExpired();

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
					description, "UTC/GMT +2:00", true);

			recordingVideoConcurrent.calendarExpiredInBackground();
		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_Camera_Concurrent_Events_When_Using_Camera_backgroundefocus_video_playing(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler cameraRecordingVideo = new PostInvocationHandler(
				concurrentevets, new ScenarioTakePictureBackgroundDefocus(
						testCase));

		IConcurrentEvents recordingVideoConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						cameraRecordingVideo);

		try {

			IMedia.setVideoPlayBackgroundSetting("on");
			recordingVideoConcurrent.videoPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.setVideoPlayBackgroundSetting("off");
			commonModule.delete(cameraFilePath);
		}
	}

	public void RELIA_MM_Concurrent_events_for_video_palying__incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler videoPlaying = new PrePostInvocationHandler(concurrentevets,
				new ScenarioVideoPlaying(testCase));
		
		IConcurrentEvents videoPlayingConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						videoPlaying);

		try {
			videoPlayingConcurrent.answerIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}
	
	public void RELIA_MM_Concurrent_events_for_video_palying__incoming_MMS(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler videoPlaying = new PrePostInvocationHandler(concurrentevets,
				new ScenarioVideoPlaying(testCase));

		IConcurrentEvents videoPlayingConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						videoPlaying);

		try {

			
			videoPlayingConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}
	
	public void RELIA_MM_Concurrent_events_for_video_palying__incoming_email(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler videoPlaying = new PrePostInvocationHandler(concurrentevets,
				new ScenarioVideoPlaying(testCase));

		IConcurrentEvents videoPlayingConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						videoPlaying);

		try {
			videoPlayingConcurrent.receiveEmail();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}
	
	public void RELIA_MM_Concurrent_events_for_video_palying__Music_background(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler videoPlaying = new PostInvocationHandler(concurrentevets,
				new ScenarioVideoPlaying(testCase));

		IConcurrentEvents videoPlayingConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						videoPlaying);

		try {
			
			videoPlayingConcurrent.musicPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}
	
	public void RELIA_MM_Concurrent_events_for_video_palying__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PostInvocationHandler videoPlaying = new PostInvocationHandler(concurrentevets,
				new ScenarioVideoPlaying(testCase));

		IConcurrentEvents videoPlayingConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						videoPlaying);

		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			videoPlayingConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}
	public void RELIA_Telephony_Concurrent_Events_While_Calling_Under_RAM__incoming_messgae(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler ongoingCall = new PrePostInvocationHandler(concurrentevets,
				new ScenarioOngingCall(testCase));

		IConcurrentEvents ongoingCallConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						ongoingCall);

		try {
			
			ongoingCallConcurrent.receiveSMS();
			
			commonModule.wait(3);
			
			ongoingCallConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			telephonyModule.endCall();
			commonModule.backOutToHomeScreen();
			
		}
	}

	public void RELIA_Telephony_Concurrent_Events_While_Calling_Under_RAM__background_download(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PostInvocationHandler ongoingCall = new PostInvocationHandler(concurrentevets,
				new ScenarioOngingCall(testCase));

		IConcurrentEvents ongoingCallConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						ongoingCall);

		try {
			
			ongoingCallConcurrent.downloadFileOnBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			telephonyModule.endCall();
			commonModule.backOutToHomeScreen();
		}
	}

	public void RELIA_Telephony_Concurrent_Events_While_Calling_Under_RAM__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler ongoingCall = new PrePostInvocationHandler(concurrentevets,
				new ScenarioOngingCall(testCase));

		IConcurrentEvents ongoingCallConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						ongoingCall);

		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			ongoingCallConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			telephonyModule.endCall();
			commonModule.backOutToHomeScreen();
		}
	}
		
	public void RELIA_Teleohony_Concurrnent_events_when_ringing__incoming_SMS(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler phoneRinging = new PrePostInvocationHandler(
				concurrentevets, new ScenarioPhoneRinging(
						testCase));

		IConcurrentEvents phoneRingingConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						phoneRinging);

		try {

			phoneRingingConcurrent.receiveSMS();
			

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_Teleohony_Concurrnent_events_when_ringing__incoming_MMS(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler phoneRinging = new PrePostInvocationHandler(
				concurrentevets, new ScenarioPhoneRinging(
						testCase));

		IConcurrentEvents phoneRingingConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						phoneRinging);
		try {


			phoneRingingConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_import_contacts__incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler importContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioImportContacts(testCase));

		IConcurrentEvents importContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						importContacts);

		try {
			
			importContactsConcurrent.answerIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();

		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_import_contacts__incoming_SMS(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler importContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioImportContacts(testCase));

		IConcurrentEvents importContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						importContacts);
		try {
			
			importContactsConcurrent.receiveSMSFormStatusBar();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_import_contacts__music_background(
			String casename, HashMap<String, String> paras) throws Exception {

		PostInvocationHandler importContacts = new PostInvocationHandler(concurrentevets,
				new ScenarioImportContacts(testCase));

		IConcurrentEvents importContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						importContacts);

		try {
			
			importContactsConcurrent.musicPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
			IContacts.deleteContacts();	
		}
	}
	
	public void RELIA_Phonebook_Concurrnent_events_when_import_contacts__FM_background(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PostInvocationHandler importContacts = new PostInvocationHandler(concurrentevets,
				new ScenarioImportContacts(testCase));

		IConcurrentEvents importContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						importContacts);

		try {
			
			importContactsConcurrent.FMRadioPlayInBackground();
		

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();	
		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_import_contacts__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler importContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioImportContacts(testCase));

		IConcurrentEvents importContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						importContacts);

		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			commonModule.wait(30);
			
			importContactsConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();
			IAlarm.deleteAllAlarms();
		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_import_contacts__calendar(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler importContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioImportContacts(testCase));

		IConcurrentEvents importContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						importContacts);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";
		
		try {

		      startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			  ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
						description, "UTC/GMT +2:00", true);
				
			  importContactsConcurrent.calendarExpiredInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();	
		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_export_contacts__incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler exportContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioExportContacts(testCase));

		IConcurrentEvents exportContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						exportContacts);

		try {
			IContacts.createMoreContacts(1000);
			
			exportContactsConcurrent.answerIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();

		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_export_contacts__incoming_SMS(
			String casename, HashMap<String, String> paras) throws Exception {


		PrePostInvocationHandler exportContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioExportContacts(testCase));

		IConcurrentEvents exportContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						exportContacts);
		try {
			IContacts.createMoreContacts(1000);
			
			exportContactsConcurrent.receiveSMSFormStatusBar();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_export_contacts__music_background(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler exportContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioExportContacts(testCase));

		IConcurrentEvents exportContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						exportContacts);

		try {
			IContacts.createMoreContacts(1000);
			
			exportContactsConcurrent.musicPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
			IContacts.deleteContacts();	
		}
	}
	
	public void RELIA_Phonebook_Concurrnent_events_when_export_contacts__FM_background(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler exportContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioExportContacts(testCase));

		IConcurrentEvents exportContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						exportContacts);

		try {
			IContacts.createMoreContacts(1000);
			
			exportContactsConcurrent.FMRadioPlayInBackground();
		

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();	
		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_export_contacts__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler exportContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioExportContacts(testCase));

		IConcurrentEvents exportContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						exportContacts);

		try {
			IContacts.createMoreContacts(1000);
			
			IAlarm.setNewAlarmOneMinuteFromNow();

			commonModule.wait(30);
			
			exportContactsConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();
			IAlarm.deleteAllAlarms();
		}
	}

	public void RELIA_Phonebook_Concurrnent_events_when_export_contacts__calendar(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler exportContacts = new PrePostInvocationHandler(concurrentevets,
				new ScenarioExportContacts(testCase));

		IConcurrentEvents exportContactsConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						exportContacts);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";
		
		try {
			 IContacts.createMoreContacts(1000);
			
		      startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			  ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
						description, "UTC/GMT +2:00", true);
			  
			  exportContactsConcurrent.calendarExpiredInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IContacts.deleteContacts();	
		}
	}

	public void RELIA_FM_Concurrnent_While_playing_FM__incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);

		try {
			
			playingFMRadioConcurrent.answerIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
            IMedia.stopRadio();
		}
	}

	public void RELIA_FM_Concurrnent_While_playing_FM__incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {


		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);
		try {
			
			playingFMRadioConcurrent.receiveSMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.stopRadio();
	}
	}

	public void RELIA_FM_Concurrnent_While_playing_FM__incoming_mms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);

		try {
			
			playingFMRadioConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.stopRadio();
		}
	}
	
	public void RELIA_FM_Concurrnent_While_playing_FM__incoming_email(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);

		try {
			
			playingFMRadioConcurrent.receiveEmail();
		

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.stopRadio();
		}
	}

	public void RELIA_FM_Concurrnent_While_playing_FM__download_file(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);

		try {

			playingFMRadioConcurrent.downloadFileOnBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.stopRadio();
		
		}
	}

	public void RELIA_FM_Concurrnent_While_playing_FM__calendar(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";
		
		try {

		      startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			  ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
						description, "UTC/GMT +2:00", true);
				
			  playingFMRadioConcurrent.calendarExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IMedia.stopRadio();
		}
	}

	public void RELIA_FM_Concurrnent_While_playing_FM__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		
		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);
		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			playingFMRadioConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.deleteAllAlarms();
			IMedia.stopRadio();
		}
	}

	public void RELIA_FM_Concurrnent_While_playing_FM__play_game(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);
		
		try {
			  
			playingFMRadioConcurrent.playGame();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
            IMedia.stopRadio();
		}
	}

	public void RELIA_FM_Concurrnent_While_playing_FM__edit_message(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler playingFMRadio = new PrePostInvocationHandler(concurrentevets,
				new ScenarioPlayingFMRadio(testCase));

		IConcurrentEvents playingFMRadioConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						playingFMRadio);
		
		try {
			  
			playingFMRadioConcurrent.editMessage();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
            IMedia.stopRadio();
		}
	}
	
	public void RELIA_Album_Concurrnent_events_when_viewing_picture__incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler viewPictureFromAlbum = new PrePostInvocationHandler(concurrentevets,
				new ScenarioViewPictureFromAlbum(testCase));

		IConcurrentEvents viewPictureFromAlbumConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						viewPictureFromAlbum);
		
		try {
			  
			viewPictureFromAlbumConcurrent.answerIncomingCall();
			
			viewPictureFromAlbumConcurrent.ignoreIncomingCall();
			
			viewPictureFromAlbumConcurrent.hangUpIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
            IMedia.stopRadio();
		}
	}
	public void RELIA_Album_Concurrnent_events_when_viewing_picture__incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler viewPictureFromAlbum = new PrePostInvocationHandler(concurrentevets,
				new ScenarioViewPictureFromAlbum(testCase));

		IConcurrentEvents viewPictureFromAlbumConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						viewPictureFromAlbum);
		
		try {
			  
			viewPictureFromAlbumConcurrent.receiveSMSFormStatusBar();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
            IMedia.stopRadio();
		}
	}
	
	public void RELIA_Album_Concurrnent_events_when_viewing_picture__incoming_mms(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler viewPictureFromAlbum = new PrePostInvocationHandler(concurrentevets,
				new ScenarioViewPictureFromAlbum(testCase));

		IConcurrentEvents viewPictureFromAlbumConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						viewPictureFromAlbum);
		
		try {
			  
			viewPictureFromAlbumConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}

	public void RELIA_Album_Concurrnent_events_when_viewing_picture__email(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler viewPictureFromAlbum = new PrePostInvocationHandler(concurrentevets,
				new ScenarioViewPictureFromAlbum(testCase));

		IConcurrentEvents viewPictureFromAlbumConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						viewPictureFromAlbum);
		
		try {
			  
			viewPictureFromAlbumConcurrent.receiveEmail();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}
	
	public void RELIA_Album_Concurrnent_events_when_viewing_picture__music_background(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PostInvocationHandler viewPictureFromAlbum = new PostInvocationHandler(concurrentevets,
				new ScenarioViewPictureFromAlbum(testCase));

		IConcurrentEvents viewPictureFromAlbumConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						viewPictureFromAlbum);
		
		try {
			  
			viewPictureFromAlbumConcurrent.musicPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_Album_Concurrnent_events_when_viewing_picture__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler viewPictureFromAlbum = new PrePostInvocationHandler(concurrentevets,
				new ScenarioViewPictureFromAlbum(testCase));

		IConcurrentEvents viewPictureFromAlbumConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						viewPictureFromAlbum);
		
		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			viewPictureFromAlbumConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.deleteAllAlarms();
		}
	}
	
	public void RELIA_Album_Concurrnent_events_when_viewing_picture__calendar(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler viewPictureFromAlbum = new PrePostInvocationHandler(concurrentevets,
				new ScenarioViewPictureFromAlbum(testCase));

		IConcurrentEvents viewPictureFromAlbumConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						viewPictureFromAlbum);
		
		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";
		try {

			startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
		    ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
							description, "UTC/GMT +2:00", true);
		    
			viewPictureFromAlbumConcurrent.calendarExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Calculator___incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler calculator = new PrePostInvocationHandler(concurrentevets,
				new ScenarioCalculator(testCase));

		IConcurrentEvents calculatorConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						calculator);

		try {
			
			calculatorConcurrent.answerIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Calculator__incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {


		PrePostInvocationHandler calculator = new PrePostInvocationHandler(concurrentevets,
				new ScenarioCalculator(testCase));

		IConcurrentEvents calculatorConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						calculator);
		try {
			
			calculatorConcurrent.receiveSMSFormStatusBar();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
	}
	}

	public void RELIA_PIM_Concurrnent_for_Calculator__incoming_mms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler calculator = new PrePostInvocationHandler(concurrentevets,
				new ScenarioCalculator(testCase));

		IConcurrentEvents calculatorConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						calculator);

		try {
			
			calculatorConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}
	
	public void RELIA_PIM_Concurrnent_for_Calculator__email(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler calculator = new PrePostInvocationHandler(concurrentevets,
				new ScenarioCalculator(testCase));

		IConcurrentEvents calculatorConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						calculator);

		try {
			
			calculatorConcurrent.receiveEmail();
		

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Calculator__music_background(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PostInvocationHandler calculator = new PostInvocationHandler(concurrentevets,
				new ScenarioCalculator(testCase));

		IConcurrentEvents calculatorConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						calculator);

		try {

			calculatorConcurrent.musicPlayInBackground();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		
		}
	}

	public void RELIA_PIM_Concurrnent_for_Calculator__calendar(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler calculator = new PrePostInvocationHandler(concurrentevets,
				new ScenarioCalculator(testCase));

		IConcurrentEvents calculatorConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						calculator);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";
		
		try {

		      startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			  ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
						description, "UTC/GMT +2:00", true);
				
			  calculatorConcurrent.calendarExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Calculator__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler calculator = new PrePostInvocationHandler(concurrentevets,
				new ScenarioCalculator(testCase));

		IConcurrentEvents calculatorConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						calculator);
		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			calculatorConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.deleteAllAlarms();
		}
	}
	
	public void RELIA_PIM_Concurrnent_for_Clocks___incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler addClock = new PrePostInvocationHandler(concurrentevets,
				new ScenarioAddClock(testCase));

		IConcurrentEvents addClockConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						addClock);

		try {
			
			addClockConcurrent.answerIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
			IAlarm.startAlarmFromMenu();
			if (!commonModule
					.isResourceId("com.sonyericsson.organizer:id/worldclock_list")) {
				IAlarm.switchAlarmTabByDescription("World clock");
			}
			IAlarm.deleteClock();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Clocks__incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {


		PrePostInvocationHandler addClock = new PrePostInvocationHandler(concurrentevets,
				new ScenarioAddClock(testCase));

		IConcurrentEvents addClockConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						addClock);
		try {
			
			addClockConcurrent.receiveSMSFormStatusBar();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.startAlarmFromMenu();
			if (!commonModule
					.isResourceId("com.sonyericsson.organizer:id/worldclock_list")) {
				IAlarm.switchAlarmTabByDescription("World clock");
			}
			IAlarm.deleteClock();
	}
	}

	public void RELIA_PIM_Concurrnent_for_Clocks__incoming_mms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler addClock = new PrePostInvocationHandler(concurrentevets,
				new ScenarioAddClock(testCase));

		IConcurrentEvents addClockConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						addClock);

		try {
			
			addClockConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.startAlarmFromMenu();
			if (!commonModule
					.isResourceId("com.sonyericsson.organizer:id/worldclock_list")) {
				IAlarm.switchAlarmTabByDescription("World clock");
			}
			IAlarm.deleteClock();
		}
	}
	
	public void RELIA_PIM_Concurrnent_for_Clocks__music_background(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PostInvocationHandler addClock = new PostInvocationHandler(concurrentevets,
				new ScenarioAddClock(testCase));

		IConcurrentEvents addClockConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						addClock);

		try {
			
			addClockConcurrent.musicPlayInBackground();
		

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.startAlarmFromMenu();
			if (!commonModule
					.isResourceId("com.sonyericsson.organizer:id/worldclock_list")) {
				IAlarm.switchAlarmTabByDescription("World clock");
			}
			IAlarm.deleteClock();
			
			IWalkman.stopMusicFromStatusBar();

		}
	}

	public void RELIA_PIM_Concurrnent_for_Clocks__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler addClock = new PrePostInvocationHandler(concurrentevets,
				new ScenarioAddClock(testCase));

		IConcurrentEvents addClockConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						addClock);

		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			addClockConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.deleteAllAlarms();
			
			IAlarm.startAlarmFromMenu();
			if (!commonModule
					.isResourceId("com.sonyericsson.organizer:id/worldclock_list")) {
				IAlarm.switchAlarmTabByDescription("World clock");
			}
			IAlarm.deleteClock();
		
		}
	}

	public void RELIA_PIM_Concurrnent_for_Clocks__calendar(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler addClock = new PrePostInvocationHandler(concurrentevets,
				new ScenarioAddClock(testCase));

		IConcurrentEvents addClockConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						addClock);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";
		
		try {

		      startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			  ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
						description, "UTC/GMT +2:00", true);
				
			  addClockConcurrent.calendarExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.startAlarmFromMenu();
			if (!commonModule
					.isResourceId("com.sonyericsson.organizer:id/worldclock_list")) {
				IAlarm.switchAlarmTabByDescription("World clock");
			}
			IAlarm.deleteClock();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Clocks__email(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler addClock = new PrePostInvocationHandler(concurrentevets,
				new ScenarioAddClock(testCase));

		IConcurrentEvents addClockConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						addClock);
		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			addClockConcurrent.receiveEmail();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.startAlarmFromMenu();
			if (!commonModule
					.isResourceId("com.sonyericsson.organizer:id/worldclock_list")) {
				IAlarm.switchAlarmTabByDescription("World clock");
			}
			IAlarm.deleteClock();
		}
	}
	
	public void RELIA_PIM_Concurrnent_for_Stopwatch___incoming_call(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler setStopwatch = new PrePostInvocationHandler(concurrentevets,
				new ScenarioSetStopwatch(testCase));

		IConcurrentEvents SetStopwatchConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						setStopwatch);

		try {
			
			SetStopwatchConcurrent.answerIncomingCall();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			telephonyModule.endCall();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Stopwatch__incoming_sms(
			String casename, HashMap<String, String> paras) throws Exception {


		PrePostInvocationHandler setStopwatch = new PrePostInvocationHandler(concurrentevets,
				new ScenarioSetStopwatch(testCase));

		IConcurrentEvents SetStopwatchConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						setStopwatch);
		try {
			
			SetStopwatchConcurrent.receiveSMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
	}
	}

	public void RELIA_PIM_Concurrnent_for_Stopwatch__incoming_mms(
			String casename, HashMap<String, String> paras) throws Exception {

		PrePostInvocationHandler setStopwatch = new PrePostInvocationHandler(concurrentevets,
				new ScenarioSetStopwatch(testCase));

		IConcurrentEvents SetStopwatchConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						setStopwatch);

		try {
			
			SetStopwatchConcurrent.receiveMMS();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}
	
	public void RELIA_PIM_Concurrnent_for_Stopwatch__music_background(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PostInvocationHandler setStopwatch = new PostInvocationHandler(concurrentevets,
				new ScenarioSetStopwatch(testCase));

		IConcurrentEvents SetStopwatchConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						setStopwatch);
		try {
			
			SetStopwatchConcurrent.musicPlayInBackground();
		

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IWalkman.stopMusicFromStatusBar();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Stopwatch__alarm(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler setStopwatch = new PrePostInvocationHandler(concurrentevets,
				new ScenarioSetStopwatch(testCase));

		IConcurrentEvents SetStopwatchConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						setStopwatch);

		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			SetStopwatchConcurrent.alarmExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
			IAlarm.deleteAllAlarms();
		
		}
	}

	public void RELIA_PIM_Concurrnent_for_Stopwatch__calendar(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler setStopwatch = new PrePostInvocationHandler(concurrentevets,
				new ScenarioSetStopwatch(testCase));

		IConcurrentEvents SetStopwatchConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						setStopwatch);

		long startMillis = 0;
		String calendarTitle1 = "Relibility test";
		String description = "This is an aging test";
		
		try {

		      startMillis = commonModule.getCurrTime() + 1000 * 60 * 12;
			  ICalendar.addNewCalendarEventAPI(startMillis, calendarTitle1,
						description, "UTC/GMT +2:00", true);
				
			  SetStopwatchConcurrent.calendarExpired();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}

	public void RELIA_PIM_Concurrnent_for_Stopwatch__email(
			String casename, HashMap<String, String> paras) throws Exception {
		
		PrePostInvocationHandler setStopwatch = new PrePostInvocationHandler(concurrentevets,
				new ScenarioSetStopwatch(testCase));

		IConcurrentEvents SetStopwatchConcurrent = (IConcurrentEvents) Proxy
				.newProxyInstance(concurrentevets.getClass().getClassLoader(),
						concurrentevets.getClass().getInterfaces(),
						setStopwatch);
		try {
			IAlarm.setNewAlarmOneMinuteFromNow();
			
			SetStopwatchConcurrent.receiveEmail();

		} catch (Exception ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (AssertionFailedError ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} catch (Error ex) {
			commonModule.takeScreenShot(casename);
			throw ex;
		} finally {
			commonModule.unLockScreen();
			commonModule.backOutToHomeScreen();
		}
	}
	

}
